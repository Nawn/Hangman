OdinProject Requirements:

Download the 5desk.txt dictionary file from http://scrapmaker.com/.
When a new game is started, your script should load in the dictionary and randomly select a word between 5 and 12 characters long for the secret word.
You don't need to draw an actual stick figure (though you can if you want to!), but do display some sort of count so the player knows how many more incorrect guesses she has before the game ends. You should also display which correct letters have already been chosen (and their position in the word, e.g. _ r o g r a _ _ i n g) and which incorrect letters have already been chosen.
Every turn, allow the player to make a guess of a letter. It should be case insensitive. Update the display to reflect whether the letter was correct or incorrect. If out of guesses, the player should lose.
Now implement the functionality where, at the start of any turn, instead of making a guess the player should also have the option to save the game. Remember what you learned about serializing objects... you can serialize your game class too!
When the program first loads, add in an option that allows you to open one of your saved games, which should jump you exactly back to where you were when you saved. Play on!


Psuedo-Code:

"Hello, thanks for playing Hangman!\nTo load last save, type: load\nTo continue, press enter\nTo exit, type: 'exit'"

Exit the game if exit.

if they choose to continue:
	Load the dictionary, and assign the answer to a random word that is >5 char, but <12 char.
	"Answer selected!"

if they choose to load:
	Load the latest save file, and then continue from where the latest save left off.

until temp_answer.solved? || guesses_left == 0 do
	Display the number of incorrect guesses left, and (for example, "P_og_mm_ng"), as well as an array of guessed characters.

	if input is 'save', then save the current state of guesses left, set answer, and unlocked letters so far

	if input is 'exit', exit the game
	
	enter character. If the character matches letter of answer_word, then have the display show that. 
	
	else, guesses_left -= 1, and add the input character to the Array of incorrect guessed characters
end

then print "You win!" || "You lose!" Depending on Whether they guessed the word, or ran out of guesses.